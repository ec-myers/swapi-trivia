{"version":3,"sources":["Util/apiCalls.js","Form/Form.js","MovieCard/MovieCard.js","CharacterCard/CharacterCard.js","Container/Container.js","Nav/Nav.js","Scroll/Scroll.js","App/App.js","serviceWorker.js","index.js"],"names":["sortFilmsByReleaseDate","data","results","sort","a","b","parseInt","release_date","slice","map","movie","i","title","scrollText","opening_crawl","id","episode","episode_id","releaseYear","getCharacters","url","fetch","then","res","ok","Error","json","characters","cleanCharacterData","chars","getSpeciesDataForCharacter","getHomeWorldDataForCharacter","getRelatedFilmsForCharacter","characterUrls","charactersData","charUrl","name","homeworld","species","films","Promise","all","speciesData","char","length","homeworldData","population","relatedFilmsData","filmNames","film","namesOfFilms","Form","getFormData","handleChange","e","setState","target","value","handleSubmit","preventDefault","state","nameErr","quote","quoteErr","user","rank","props","isComplete","this","to","nameClass","quoteClass","className","htmlFor","autoFocus","placeholder","onChange","defaultValue","type","onClick","Component","MovieCard","goToMovieCharacters","CharacterCard","character","toggleFavorite","favorites","isFavorite","includes","btnMessage","allFilms","key","Container","cards","selectedCards","allCards","card","Nav","logOut","numFavs","console","log","activeStyle","color","Scroll","selectedMovie","App","targetMovie","movies","haveCharacters","userInfo","isFormComplete","localStorage","setItem","JSON","stringify","favorite","removeFavorite","addFavorite","newFavorites","filter","clear","haveMovies","error","response","catch","getItem","storedFavorites","parse","storedUser","exact","path","render","Boolean","window","location","hostname","match","router","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2436588.chunk.js","sourcesContent":["export const getFilms = () => {\n  return fetch('https://swapi.co/api/films')\n    .then(response => {\n      if(!response.ok) {\n        throw Error('Could not fetch films, please refresh the page and try again')\n      }\n      return response.json()})\n    .then(data => sortFilmsByReleaseDate(data))\n}\n\nconst sortFilmsByReleaseDate = (data) => {\n  return data.results.sort((a, b) => {\n    let yearA = parseInt(a.release_date.slice(0, 4));\n    let yearB = parseInt(b.release_date.slice(0, 4));\n    return yearA - yearB\n  }).map((movie,i) => {\n    return {\n      title: movie.title,\n      scrollText: movie.opening_crawl,\n      id: i + 1,\n      episode: movie.episode_id,\n      releaseYear: movie.release_date.slice(0, 4)\n    }\n  })\n}\n\nexport const getCharacters = (id) => {\n  let url = `https://swapi.co/api/films/${id}`\n  return fetch(url).then(res => {\n    if(!res.ok) {\n      throw Error('Unable to fetch characters, click the movies tab and try again')\n    }\n    return res.json()})\n  .then(data => data.characters)\n  .then(data => cleanCharacterData(data))\n  .then(chars => getSpeciesDataForCharacter(chars))\n  .then(chars => getHomeWorldDataForCharacter(chars))\n  .then(chars => getRelatedFilmsForCharacter(chars))\n\n}\n\nconst cleanCharacterData = (characterUrls) => {\n  let charactersData = characterUrls.map(charUrl => {\n    return fetch(charUrl).then(res => res.json()).then(data => {\n      return {\n        name:data.name,\n        homeworld: data.homeworld,\n        species: data.species,\n        films: data.films\n      }\n    })\n  })\n  return Promise.all(charactersData)\n}\n\nconst getSpeciesDataForCharacter = (chars) => {\n  let speciesData = chars.map(char => {\n    if (char.species.length === 0) {\n      return {\n        ...char,\n        species: 'Unknown'\n      }\n    }\n    return fetch(char.species).then(res => res.json()).then(species => {\n      return {\n        ...char,\n        species: species.name\n        }\n      })\n    }\n  )\n  return Promise.all(speciesData)\n}\n\nconst getHomeWorldDataForCharacter = (chars) => {\n  let homeworldData = chars.map(char => {\n    return fetch(char.homeworld).then(res => res.json()).then(homeworld => {\n      return {\n        ...char,\n        homeworld: homeworld.name,\n        population: homeworld.population\n      }\n    })\n  })\n  return Promise.all(homeworldData)\n}\n\nconst getRelatedFilmsForCharacter = (chars) => {\n  let relatedFilmsData = chars.map(char => {\n    let filmNames = char.films.map(film => {\n      return fetch(film).then(res => res.json()).then(film => film.title)\n    })\n    return Promise.all(filmNames).then(namesOfFilms => {\n      return {\n        ...char,\n        films: namesOfFilms\n      }\n    }\n    )\n  })\n  return Promise.all(relatedFilmsData)\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './Form.scss';\n\nclass Form extends Component {\n  constructor(getFormData) {\n    super(getFormData);\n    this.state = {\n      name: \"\",\n      quote: \"\",\n      rank:\"Padawan\",\n      nameErr: false,\n      quoteErr: false,\n      isComplete: false\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({[e.target.id]: e.target.value})\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    if (!this.state.name) {\n      this.setState({nameErr: true})\n    } else { this.setState({ nameErr: false }) }\n\n    if (!this.state.quote) {\n      this.setState({quoteErr: true})\n    } else { this.setState({ quoteErr: false })}\n\n    if(this.state.name && this.state.quote) {\n      let user = {name:this.state.name, \n        quote:this.state.quote, \n        rank: this.state.rank}\n      this.props.getFormData(user)\n      this.setState({isComplete: true})\n    }\n  }\n\n  render() {\n    if (this.state.isComplete) {\n      return <Redirect to='/movies' />\n    }\n\n    const { name, quote, rank, nameErr, quoteErr } = this.state\n    let nameClass = nameErr ? \"error\" : \"\";\n    let quoteClass = quoteErr ? \"error\" : \"\";\n\n\n    return (\n      <form>\n        <h1>Star Wars Character Trivia!</h1>\n        <div className=\"form-background\">\n          <label htmlFor=\"name\">Name</label>\n          <input autoFocus value={name} id=\"name\" \n          placeholder=\"Enter a name\"\n          className={nameClass}\n          onChange={this.handleChange}/>\n          <div>\n          {nameErr && <p>Please enter a name</p>}\n          </div>\n          <label htmlFor=\"quote\">Favorite Star Wars Quote</label>\n          <input value={quote} id=\"quote\"\n          className={quoteClass} \n            placeholder=\"Enter your favorite Quote\"  \n          onChange={this.handleChange}/>\n          <div>\n          {quoteErr && <p>Please enter a quote</p>}\n          </div>\n          <label htmlFor=\"rank\">Rank</label>\n          <select value={rank} \n          onChange={this.handleChange} id=\"rank\">\n            <option value=\"Padawan\" defaultValue>Padawan</option>\n            <option value=\"Jedi Knight\">Jedi Knight</option>\n            <option value=\"Jedi Master\">Jedi Master</option>\n          </select>\n            <button type=\"button\" onClick={this.handleSubmit}>May The Force Be With You</button>\n        </div>\n      </form>\n    )\n  }\n}\n\nexport default Form;\n\nForm.propTypes = {\n  getFormData: PropTypes.func.isRequired\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'\nimport './MovieCard.scss';\n\nconst MovieCard = ({movie, goToMovieCharacters}) => {\n  return(\n    <div className=\"Movie-Card\">\n      <h2>{movie.title}</h2>\n      <h3>Episode: {movie.episode}</h3>\n      <h3>Released in {movie.releaseYear}</h3>\n      <Link onClick={goToMovieCharacters}  to={`/movies/${movie.id}`}>\n          <button id={movie.id}>Explore Characters</button> \n      </Link>\n    </div>\n  )\n}\n\nexport default MovieCard; \n\nMovieCard.propTypes = {\n  movie: PropTypes.object.isRequired,\n  goToMovieCharacters: PropTypes.func\n\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CharacterCard.scss';\n\nconst CharacterCard = ({character, toggleFavorite, favorites}) => {\n  const { name, homeworld, population, species, films } = character;\n  let isFavorite = favorites.map(char => char.name).includes(name) ? 'favorite' : '' ;\n  let btnMessage = isFavorite ? 'Remove Favorite' : 'Add Favorite'\n  const allFilms = films.map(film => {\n  return <li key={film}>{film}</li>\n  })\n\n  return (\n    <div className={`Character-Card ${isFavorite}`} >\n      <h2>{name}</h2>\n      <h3>Homeworld: {homeworld}</h3>\n      <h3>Population: {population}</h3>\n      <h3>Species: {species}</h3>\n      <ul>Films: {allFilms}</ul>\n      <div className='div-favorite'>\n        <button id={name} onClick={() => {toggleFavorite(character)}}>{btnMessage}</button>\n      </div>\n    </div>\n  )\n}\n\nexport default CharacterCard;\n\nCharacterCard.propTypes = {\n  character: PropTypes.object,\n  toggleFavorite: PropTypes.func,\n  favorites: PropTypes.array\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from '../MovieCard/MovieCard';\nimport CharacterCard from '../CharacterCard/CharacterCard';\nimport './Container.scss';\n\nconst Container = ({cards, goToMovieCharacters, toggleFavorite, favorites, type}) => {\n  if (type === 'favorites' && favorites.length === 0) {\n    return (\n      <div className=\"empty-favorites\">\n        <h3>Add some favorites!</h3>\n        <p>Head back to the 'Movies' Tab</p>\n      </div>\n    )\n  }\n  if(cards.length === 0) {\n    return <div>Woops</div>\n  }\n  let selectedCards = cards\n  if (type === 'characters') \n  {selectedCards = cards.slice(0, 10)}\n  let allCards = selectedCards.map(card => {\n    if (card.title) {\n      return <MovieCard key={card.episode} movie={card} goToMovieCharacters={goToMovieCharacters}/>\n    }\n    return <CharacterCard key={card.name} character={card} toggleFavorite={toggleFavorite} favorites={favorites} />\n  })\n\n  return(<section className='Container'>\n    {allCards}\n  </section>)\n}\n\nexport default Container;\n\nContainer.propTypes = {\n  cards: PropTypes.array,\n  goToMovieCharacters: PropTypes.func,\n  toggleFavorite: PropTypes.func,\n  favorites: PropTypes.array,\n  type: PropTypes.string\n}","import React from 'react';\nimport { NavLink, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'\nimport './Nav.scss';\n\nconst Nav = ({user, logOut, numFavs}) => {\n  console.log(numFavs)\n  return (\n  <nav>\n    <div className='user-container'>\n      <div className='inner'>\n          <span>i</span>\n        <p>Name: {user.name}</p>\n        <p>Quote: {user.quote}</p>\n        <p>Rank: {user.rank}</p>\n      </div>\n    </div>\n      <NavLink to='/movies' className='nav-link' activeStyle={{ color: 'coral' }}>Movies</NavLink>\n      <NavLink to='/favorites' className='nav-link' activeStyle={{ color: 'coral' }}>Favorites({numFavs}) </NavLink>\n    <Link onClick={logOut} to='/'>\n      <button>Logout</button>\n    </Link>\n  </nav>\n  )\n}\n\nexport default Nav;\n\nNav.propTypes = {\n  user: PropTypes.object.isRequired,\n  logOut: PropTypes.func.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Scroll.scss'\n\n\nconst Scroll = ({selectedMovie}) => {\n  const {title, scrollText, episode} = selectedMovie;\n  return (\n    <div className=\"scroll\">\n      < div className=\"fade\" ></div >\n      <section className=\"star-wars\">\n        <div className=\"crawl\">\n          <div className=\"title\">\n            <p>Episode {episode}</p>\n            <h1>{title}</h1>\n          </div>\n          <p>{scrollText}</p>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default Scroll;\n\nScroll.propTypes = {\n  selectedMovie: PropTypes.object\n}","import React, { Component } from 'react';\nimport { getFilms, getCharacters } from '../Util/apiCalls';\nimport { Route } from 'react-router-dom';\nimport '../App/App.scss';\nimport Form from '../Form/Form';\nimport Container from '../Container/Container';\nimport Nav from '../Nav/Nav';\nimport Scroll from '../Scroll/Scroll'\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userInfo: {},\n      movies:[],\n      characters: [],\n      selectedMovie: {},\n      haveMovies: false,\n      haveCharacters: true, \n      isFormComplete: false,\n      favorites: [],\n      error: ''\n    }\n  }\n\n  componentDidMount() {\n\n    getFilms().then(data => this.setState({movies: data, haveMovies: true}))\n    .catch(error => this.setState({error: error}))\n\n    if(localStorage.getItem('favorites')) {\n      const storedFavorites = JSON.parse(localStorage.getItem('favorites'))\n      this.setState({favorites: storedFavorites})\n    }\n\n    if(localStorage.getItem('userInfo')) {\n      const storedUser = JSON.parse(localStorage.getItem('userInfo'))\n      this.setState({ userInfo: storedUser, isFormComplete: true })\n    }\n  }\n\n  goToMovieCharacters = (e) => {\n    let id = parseInt(e.target.id)\n    let targetMovie = this.state.movies[id-1];\n    this.setState({selectedMovie: targetMovie, haveCharacters: false, characters: []})\n    getCharacters(id).then(data => this.setState({characters: data, haveCharacters: true}))\n  }\n\n  getFormData = (userInfo) => {\n    this.setState({userInfo: userInfo, isFormComplete:true})\n    localStorage.setItem('userInfo', JSON.stringify(userInfo))\n  }\n\n  toggleFavorite = (character) => {\n    const { favorites } = this.state;\n    favorites.map(favorite => favorite.name).includes(character.name) ? this.removeFavorite(character) : this.addFavorite(character);\n  }\n\n  addFavorite = (character) => {\n    const { favorites } = this.state;\n    let newFavorites = [...favorites, character];\n    this.setState({favorites: newFavorites });\n    localStorage.setItem('favorites', JSON.stringify(newFavorites));\n  }\n\n  removeFavorite = (character) => {\n    const { favorites } = this.state;\n    let newFavorites = favorites.filter(favorite => favorite.name !== character.name);\n    this.setState({favorites: newFavorites});\n    localStorage.setItem('favorites', JSON.stringify(newFavorites));\n  }\n\n  logOut = () => {\n    localStorage.clear()\n    this.setState({ isFormComplete: false, userInfo: {} })\n  }\n\n  render() {\n    const{movies, characters, isFormComplete, userInfo, haveCharacters, selectedMovie, haveMovies, favorites, error} = this.state\n\n    return (\n      <main className=\"App\">\n        <Route exact path='/' render={() => <Form getFormData={this.getFormData} />} />\n        {isFormComplete && <Nav logOut={this.logOut} user={userInfo} numFavs={favorites.length} />}\n        {!haveMovies && <div className='loading-img'></div>}\n        {error && <div className=\"error-div\">{error}</div>}\n        <Route exact path='/movies' render={() => <Container cards={movies} goToMovieCharacters={this.goToMovieCharacters} />} />\n        {haveCharacters && <Route exact path='/movies/:id' render={() => <Container type=\"characters\" cards={characters} toggleFavorite={this.toggleFavorite} favorites={favorites} /> } />}\n        <Route exact path='/favorites' render={() => <Container type='favorites' cards={favorites} favorites={favorites} toggleFavorite={this.toggleFavorite} />} />\n        {haveMovies && !haveCharacters && <Scroll selectedMovie={selectedMovie} />}\n      </main>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst router = (\n  <HashRouter>\n    <App />\n  </HashRouter>\n)\nReactDOM.render(router, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}